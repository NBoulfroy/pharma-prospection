/**
 * Form class.
 *
 * @Project : Pharma-Prospection
 * @File    : web/assets/js/Form.js
 * @Version : 1.3
 * @Author  : BOULFROY Nicolas
 * @Create  : 2018/03/15
 * @Update  : 2018/03/21
 */

/**
 * Form class constructor.
 *
 * @param {null|string} modal - modal class
 * @param {string} formClass - form class
 * @param {string} submitButton - button's form which is used to submit the form
 * @param {array} buttons - others buttons used to display the form for example
 * @param {string} url - address to which the AJAX request must go
 * @param {string} dataClass - where the data must be added
 * @param {null|string} type - what use case is used to implement data in HTML template
 * @param {null|string} link - the <a></a> href content attribute
 * @constructor
 */
function Form(modal = null, formClass, submitButton, buttons, url, dataClass, type = null, link = null) {
    this.modal = modal;
    this.class = formClass;
    this.submitButton = submitButton;
    this.buttons = buttons;
    this.url = url;
    this.dataClass = document.getElementsByClassName(dataClass)[0];
    this.form = document.getElementsByClassName(this.class)[0];
    this.type = type;
    this.link = link;
    this._events();
}

/**
 * Controls value by a type passed in parameters.
 *
 * @param {string} type
 * @param {int|string} value
 * @returns {boolean}
 * @private
 */
Form.prototype._controlValue = function(type, value) {
    switch(type) {
        case 'int':
            return /^[0-9]{1,}$/g.test(value);
        case 'decimal':
            return /^[0-9]+(\.[0-9][0-9]?)?$/g.test(value);
    }
};

/**
 * Controls the input.
 *
 * @returns {boolean}
 * @private
 */
Form.prototype._controlInput = function(type, value) {
    // Controls the value.
    if (!this._controlValue(type, value)) {
        // Disables the button.
        document.getElementById('save').setAttribute('disabled', 'disabled');
        return false;
    } else {
        // Enables the button.
        document.getElementById('save').removeAttribute('disabled');
        return true;
    }
};

/**
 * Controls the form.
 *
 * @private
 */
Form.prototype._controlForm = function() {
    let inputs = this.form.getElementsByTagName('input');

    for (let i = 0; i < inputs.length - 1; i++) {
        if (!Form.prototype._controlInput(
                // Returns the value of 'data-type' attribute from the input.
                inputs[i].getAttribute('data-type'),
                // If value is '', return 0, else return the value contains in the input.
                (inputs[i].value != '') ? inputs[i].value : 0
            )) {
            break;
        }
    }
};

/**
 * Prevents the default behaviour about forms.
 *
 * @private
 */
Form.prototype._preventSubmit = function() {
    document.getElementsByClassName(this.class)[0].submit = function() {
        return false;
    }
};

/**
 * Disables a button.
 *
 * @private
 */
Form.prototype.disabledButton = function() {
    document.getElementById(this.submitButton).setAttribute('disabled', 'disabled');
};

/**
 * Controls all content of the form (not the token generated by Symfony)..
 */
Form.prototype._events = function() {
    let modal = this.modal;
    let form = this.form;
    let formClass = form.getAttribute('class');
    let inputs = this.form.getElementsByTagName('input');
    let buttons = this.buttons;
    let url = this.url;
    let dataClass = this.dataClass;
    let type = this.type;
    let link = this.link;

    // Disables the "submit" button.
    this.disabledButton();

    // Sets for all inputs an event.
    for (let j = 0; j < inputs.length - 1; j++) {
        inputs[j].addEventListener('change', this._controlForm);
    }

    // Sets for buttons an event passed in parameter in constructor (array)
    for (let k = 0; k < buttons.length; k++) {
        document.getElementById(buttons[k]).addEventListener('click', function() {
            document.getElementsByClassName(formClass)[0].reset();
        });
    }

    // Creates an event to manage AJAX request.
    document.getElementById(this.submitButton).addEventListener('click', function() {
        let data = new FormData();

        for (let l = 0; l < inputs.length; l++) {
            data.append(inputs[l].getAttribute('name'), (inputs[l].value != '') ? inputs[l].value : 0);
        }

        // Creates an AJAX object and realizes the treatment (back-end and front-end).
        let ajax = new Ajax(modal, form, 'POST', url, data, dataClass, type, link);
    });
};